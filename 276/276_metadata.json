{
    "fname": "hibernate/common/src/main/java/org/n52/sos/ds/hibernate/entities/AbstractObservationTime.java",
    "repo": "https://github.com/52North/SOS",
    "commitHash": "9b0a1f89a430dd09ee319470600701cb9538f2c4",
    "uninteresting": {
        "file_same_as_a": false,
        "file_same_as_b": false,
        "file_same_as_base": false,
        "file_same_as_theirs": false,
        "file_same_as_ours": false,
        "file_base_empty": false,
        "file_resolved_empty": false
    },
    "minified": false,
    "conflicting_chunks": [
        {
            "sizes": {
                "lines": {
                    "a": 9,
                    "b": 2,
                    "base": 2
                },
                "chars": {
                    "a": 346,
                    "b": 198,
                    "base": 176
                }
            },
            "a_contents": "public abstract class AbstractObservationTime\n        extends AbstractIdentifierNameDescriptionEntity\n        implements Serializable,\n                   HasDeletedFlag,\n                   HasOfferings,\n                   HasPhenomenonTime,\n                   HasResultTime,\n                   HasValidTime,\n                   HasObservationId {\n",
            "b_contents": "\npublic abstract class AbstractObservationTime implements Serializable, HasDeletedFlag, HasOfferings, HasPhenomenonTime,\n        HasResultTime, HasValidTime, HasObservationId, HasSamplingGeometry {\n",
            "base_contents": "public abstract class AbstractObservationTime implements Serializable, HasDeletedFlag, HasOfferings, HasPhenomenonTime,\n        HasResultTime, HasValidTime, HasObservationId {\n",
            "num_conflicts_in_file": 2,
            "found_res_region": true,
            "res_region": "public abstract class AbstractObservationTime\n        extends AbstractIdentifierNameDescriptionEntity\n        implements Serializable,\n                   HasDeletedFlag,\n                   HasOfferings,\n                   HasPhenomenonTime,\n                   HasResultTime,\n                   HasValidTime,\n                   HasObservationId,\n                   HasSamplingGeometry {\n",
            "res_start_pos": 2149,
            "res_end_pos": 2535,
            "lookback": "<START\\>/**\n * Copyright (C) 2012-2014 52\u00b0North Initiative for Geospatial Open Source\n * Software GmbH\n *\n * This program is free software; you can redistribute it and/or modify it\n * under the terms of the GNU General Public License version 2 as published\n * by the Free Software Foundation.\n *\n * If the program is linked with libraries which are licensed under one of\n * the following licenses, the combination of the program with the linked\n * library is not considered a \"derivative work\" of the program:\n *\n *     - Apache License, version 2.0\n *     - Apache Software License, version 1.0\n *     - GNU Lesser General Public License, version 3\n *     - Mozilla Public License, versions 1.0, 1.1 and 2.0\n *     - Common Development and Distribution License (CDDL), version 1.0\n *\n * Therefore the distribution of the program linked with libraries licensed\n * under the aforementioned licenses, is permitted by the copyright holders\n * if the distribution is compliant with both the GNU General Public\n * License version 2 and the aforementioned licenses.\n *\n * This program is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n * Public License for more details.\n */\npackage org.n52.sos.ds.hibernate.entities;\n\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.Set;\n\nimport org.n52.sos.ds.hibernate.entities.HibernateRelations.HasDeletedFlag;\nimport org.n52.sos.ds.hibernate.entities.HibernateRelations.HasObservationId;\nimport org.n52.sos.ds.hibernate.entities.HibernateRelations.HasOfferings;\nimport org.n52.sos.ds.hibernate.entities.HibernateRelations.HasPhenomenonTime;\nimport org.n52.sos.ds.hibernate.entities.HibernateRelations.HasResultTime;\nimport org.n52.sos.ds.hibernate.entities.HibernateRelations.HasSamplingGeometry;\nimport org.n52.sos.ds.hibernate.entities.HibernateRelations.HasValidTime;\n\nimport com.vividsolutions.jts.geom.Geometry;\n\n/**\n * Abstract class for value time\n *\n * @author Carsten Hollmann <c.hollmann@52north.org>\n * @since 4.1.0\n *\n */\n",
            "lookahead": "\n    private static final long serialVersionUID = 8704397558609682891L;\n\n    private long observationId;\n    private Date phenomenonTimeStart;\n    private Date phenomenonTimeEnd;\n    private Date resultTime;\n    private Date validTimeStart;\n    private Date validTimeEnd;\n    private Set<Offering> offerings = new HashSet<Offering>(0);\n    private boolean deleted;\n\n    private Geometry samplingGeometry;\n\n    @Override\n    public long getObservationId() {\n        return observationId;\n    }\n\n    @Override\n    public void setObservationId(final long observationId) {\n        this.observationId = observationId;\n    }\n\n    @Override\n    public Date getPhenomenonTimeStart() {\n        return phenomenonTimeStart;\n    }\n\n    @Override\n    public void setPhenomenonTimeStart(final Date phenomenonTimeStart) {\n        this.phenomenonTimeStart = phenomenonTimeStart;\n    }\n\n    @Override\n    public Date getPhenomenonTimeEnd() {\n        return phenomenonTimeEnd;\n    }\n\n    @Override\n    public void setPhenomenonTimeEnd(final Date phenomenonTimeEnd) {\n        this.phenomenonTimeEnd = phenomenonTimeEnd;\n    }\n\n    @Override\n    public Date getResultTime() {\n        return resultTime;\n    }\n\n    @Override\n    public void setResultTime(final Date resultTime) {\n        this.resultTime = resultTime;\n    }\n\n    @Override\n    public Date getValidTimeStart() {\n        return validTimeStart;\n    }\n\n    @Override\n    public void setValidTimeStart(final Date validTimeStart) {\n        this.validTimeStart = validTimeStart;\n    }\n\n    @Override\n    public Date getValidTimeEnd() {\n        return validTimeEnd;\n    }\n\n    @Override\n    public void setValidTimeEnd(final Date validTimeEnd) {\n        this.validTimeEnd = validTimeEnd;\n    }\n\n    @Override\n    public boolean isSetValidTime() {\n        return getValidTimeStart() != null && getValidTimeEnd() != null;\n    }\n\n    @Override\n    public HasDeletedFlag setDeleted(boolean deleted) {\n        this.deleted = deleted;\n        return this;\n    }\n\n    @Override\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    @Override\n    public boolean getDeleted() {\n        return deleted;\n    }\n\n    @Override\n    public Set<Offering> getOfferings() {\n        return offerings;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void setOfferings(final Object offerings) {\n        if (offerings instanceof Set<?>) {\n            this.offerings = (Set<Offering>) offerings;\n        } else {\n            getOfferings().add((Offering) offerings);\n        }\n    }\n",
            "label": "OTHER",
            "in_vocab_lines": false,
            "in_vocab_words": true
        },
        {
            "sizes": {
                "lines": {
                    "a": 1,
                    "b": 14,
                    "base": 1
                },
                "chars": {
                    "a": 0,
                    "b": 394,
                    "base": 1
                }
            },
            "a_contents": "",
            "b_contents": "\n    \n    @Override\n    public Geometry getSamplingGeometry() {\n        return samplingGeometry;\n    }\n    \n    @Override\n    public void setSamplingGeometry(Geometry samplingGeometry) {\n        this.samplingGeometry = samplingGeometry;\n    }\n    \n    @Override\n    public boolean hasSamplingGeometry() {\n        return getSamplingGeometry() != null && !getSamplingGeometry().isEmpty();\n    }\n\n",
            "base_contents": "\n",
            "num_conflicts_in_file": 2,
            "found_res_region": true,
            "res_region": "    \n    @Override\n    public Geometry getSamplingGeometry() {\n        return samplingGeometry;\n    }\n    \n    @Override\n    public void setSamplingGeometry(Geometry samplingGeometry) {\n        this.samplingGeometry = samplingGeometry;\n    }\n    \n    @Override\n    public boolean hasSamplingGeometry() {\n        return getSamplingGeometry() != null && !getSamplingGeometry().isEmpty();\n    }\n\n",
            "res_start_pos": 5065,
            "res_end_pos": 5458,
            "lookback": "\n    private static final long serialVersionUID = 8704397558609682891L;\n\n    private long observationId;\n    private Date phenomenonTimeStart;\n    private Date phenomenonTimeEnd;\n    private Date resultTime;\n    private Date validTimeStart;\n    private Date validTimeEnd;\n    private Set<Offering> offerings = new HashSet<Offering>(0);\n    private boolean deleted;\n\n    private Geometry samplingGeometry;\n\n    @Override\n    public long getObservationId() {\n        return observationId;\n    }\n\n    @Override\n    public void setObservationId(final long observationId) {\n        this.observationId = observationId;\n    }\n\n    @Override\n    public Date getPhenomenonTimeStart() {\n        return phenomenonTimeStart;\n    }\n\n    @Override\n    public void setPhenomenonTimeStart(final Date phenomenonTimeStart) {\n        this.phenomenonTimeStart = phenomenonTimeStart;\n    }\n\n    @Override\n    public Date getPhenomenonTimeEnd() {\n        return phenomenonTimeEnd;\n    }\n\n    @Override\n    public void setPhenomenonTimeEnd(final Date phenomenonTimeEnd) {\n        this.phenomenonTimeEnd = phenomenonTimeEnd;\n    }\n\n    @Override\n    public Date getResultTime() {\n        return resultTime;\n    }\n\n    @Override\n    public void setResultTime(final Date resultTime) {\n        this.resultTime = resultTime;\n    }\n\n    @Override\n    public Date getValidTimeStart() {\n        return validTimeStart;\n    }\n\n    @Override\n    public void setValidTimeStart(final Date validTimeStart) {\n        this.validTimeStart = validTimeStart;\n    }\n\n    @Override\n    public Date getValidTimeEnd() {\n        return validTimeEnd;\n    }\n\n    @Override\n    public void setValidTimeEnd(final Date validTimeEnd) {\n        this.validTimeEnd = validTimeEnd;\n    }\n\n    @Override\n    public boolean isSetValidTime() {\n        return getValidTimeStart() != null && getValidTimeEnd() != null;\n    }\n\n    @Override\n    public HasDeletedFlag setDeleted(boolean deleted) {\n        this.deleted = deleted;\n        return this;\n    }\n\n    @Override\n    public boolean isDeleted() {\n        return deleted;\n    }\n\n    @Override\n    public boolean getDeleted() {\n        return deleted;\n    }\n\n    @Override\n    public Set<Offering> getOfferings() {\n        return offerings;\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    public void setOfferings(final Object offerings) {\n        if (offerings instanceof Set<?>) {\n            this.offerings = (Set<Offering>) offerings;\n        } else {\n            getOfferings().add((Offering) offerings);\n        }\n    }\n",
            "lookahead": "}<END\\>",
            "label": "B",
            "in_vocab_lines": true,
            "in_vocab_words": true
        }
    ],
    "metadata_corrupted": false
}